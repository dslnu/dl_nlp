---
title: "Intro to PyTorch"
author: 
  - name: Vitaly Vlasov
    affiliation: Lviv University
code-fold: false
execute:
  enabled: true
  echo: true
  cache: true
diagram:
  cache: true
  cache-dir: ./cache
  engine:
    tikz:
      execpath: lualatex
      additional-packages: |
        \usepackage{neuralnetwork}
        \usepackage{mathtools}
        \usepackage{amsmath}
        \pgfplotsset{compat=1.16}
        \usepackage{pgfplots}
        \newcommand\mybox[2][]{\tikz[overlay]\node[fill=blue!20,inner sep=2pt, anchor=text, rectangle, rounded corners=1mm,#1] {#2};\phantom{#2}}
        \usetikzlibrary{arrows.meta}
        \usetikzlibrary{positioning}
        \usetikzlibrary{shapes.misc}
        \usetikzlibrary{decorations.pathreplacing}
filters:
  - diagram
format: 
  revealjs:
    preview-links: auto
    include-in-header: mathjax.html
    slide-number: true
    theme: default
    multiplex:
      url: 'https://mplex.vitv.ly'
      secret: '9eea8372bd1d5b26e533c9f62ac3ded8'
      id: 'dfeb146abfa7566d06e3260dc51741a028c92925d9a164cf153da95cae43b4f3'
---
## Imports

```{python}
## Standard libraries
import os
import math
import numpy as np
import time

## Imports for plotting
import matplotlib.pyplot as plt
%matplotlib inline
from IPython.display import set_matplotlib_formats
set_matplotlib_formats('svg', 'pdf') # For export
from matplotlib.colors import to_rgba
import seaborn as sns
sns.set()

## Progress bar
from tqdm.notebook import tqdm
```

## Basic PyTorch import

```{python}
import torch
print("Using torch", torch.__version__)
```

## Set the seed

```{python}
torch.manual_seed(42) # Setting the seed
```

## Tensors

Tensors

Tensors are the PyTorch equivalent to Numpy arrays, with the addition to also have support for GPU acceleration (more on that later). The name "tensor" is a generalization of concepts you already know. For instance, a vector is a 1-D tensor, and a matrix a 2-D tensor. When working with neural networks, we will use tensors of various shapes and number of dimensions.

Most common functions you know from numpy can be used on tensors as well. Actually, since numpy arrays are so similar to tensors, we can convert most tensors to numpy arrays (and back) but we don't need it too often.

## Tensors

```{python}
x = torch.Tensor(2, 3, 4)
print(x)
```

## Tensors
The function `torch.Tensor` allocates memory for the desired tensor, but reuses any values that have already been in the memory. To directly assign values to the tensor during initialization, there are many alternatives including:

* `torch.zeros`: Creates a tensor filled with zeros
* `torch.ones`: Creates a tensor filled with ones
* `torch.rand`: Creates a tensor with random values uniformly sampled between 0 and 1
* `torch.randn`: Creates a tensor with random values sampled from a normal distribution with mean 0 and variance 1
* `torch.arange`: Creates a tensor containing the values $N,N+1,N+2,...,M$
* `torch.Tensor` (input list): Creates a tensor from the list elements you provide



## Tensors
```{python}
# Create a tensor from a (nested) list
x = torch.Tensor([[1, 2], [3, 4]])
print(x)
```

## Tensors
```{python}
# Create a tensor with random values between 0 and 1 with the shape [2, 3, 4]
x = torch.rand(2, 3, 4)
print(x)
```
## Tensors
:::{.callout-tip icon=false}
## Tensor shape
```{python}
shape = x.shape
print("Shape:", x.shape)

size = x.size()
print("Size:", size)

dim1, dim2, dim3 = x.size()
print("Size:", dim1, dim2, dim3)
```
:::

## Tensors

:::{.callout-tip icon=false}
## To Numpy and back again

```{python}
np_arr = np.array([[1, 2], [3, 4]])
tensor = torch.from_numpy(np_arr)

print("Numpy array:", np_arr)
print("PyTorch tensor:", tensor)
```
To transform a PyTorch tensor back to a numpy array, we can use the function .numpy() on tensors:

```{python}
tensor = torch.arange(4)
np_arr = tensor.numpy()

print("PyTorch tensor:", tensor)
print("Numpy array:", np_arr)
```
:::

:::{.callout-note}
The conversion of tensors to numpy require the tensor to be on the CPU, and not the GPU (more on GPU support in a later section). In case you have a tensor on GPU, you need to call `.cpu()` on the tensor beforehand. Hence, you get a line like `np_arr = tensor.cpu().numpy()`.
:::

## Operations
Most operations that exist in numpy, also exist in PyTorch. A full list of operations can be found in the [PyTorch documentation](https://pytorch.org/docs/stable/tensors.html#), but we will review the most important ones here.

:::{.callout-tip icon=false}
## Addition

```{python}
x1 = torch.rand(2, 3)
x2 = torch.rand(2, 3)
y = x1 + x2

print("X1", x1)
print("X2", x2)
print("Y", y)
```
:::

:::{.callout-important}
Calling x1 + x2 creates a **new** tensor containing the sum of the two inputs.
:::

## Operations
:::{.callout-note icon=false}
## In-place

We can also use in-place operations that are applied directly on the memory of a tensor. We therefore change the values of x2 without the chance to re-accessing the values of x2 before the operation.

```{python}
x1 = torch.rand(2, 3)
x2 = torch.rand(2, 3)
print("X1 (before)", x1)
print("X2 (before)", x2)

x2.add_(x1)
print("X1 (after)", x1)
print("X2 (after)", x2)
```
:::

::: aside
In-place operations are usually marked with a underscore postfix (e.g. "add_" instead of "add").
:::

## Operations
:::{.callout-tip icon=false}
## Shape change
Another common operation aims at changing the shape of a tensor. A tensor of size (2,3) can be re-organized to any other shape with the same number of elements (e.g. a tensor of size (6), or (3,2), ...). In PyTorch, this operation is called `view`:
```{python}
x = torch.arange(6)
print("X", x)
```
```{python}
x = x.view(2, 3)
print("X", x)
```
You can also swap dimensions:
```{python}
x = x.permute(1, 0) # Swapping dimension 0 and 1
print("X", x)
```
:::

## Operations
:::{.callout-tip icon=false}
## Multiplication
Quite often, we have an input vector $\mathbf{x}$, which is transformed using a learned weight matrix $\mathbf{W}$. There are multiple ways and functions to perform matrix multiplication:

* `torch.matmul`: Performs the matrix product over two tensors, where the specific behavior depends on the dimensions. If both inputs are matrices (2-dimensional tensors), it performs the standard matrix product. For higher dimensional inputs, the function supports broadcasting (for details see the [documentation](https://pytorch.org/docs/stable/generated/torch.matmul.html?highlight=matmul#torch.matmul)). Can also be written as `a @ b`, similar to numpy. 
* `torch.mm`: Performs the matrix product over two matrices, but doesn't support broadcasting (see [documentation](https://pytorch.org/docs/stable/generated/torch.mm.html?highlight=torch%20mm#torch.mm))
:::

## Operations
:::{.callout-tip icon=false}
## Multiplication
* `torch.bmm`: Performs the matrix product with a support batch dimension. If the first tensor $T$ is of shape ($b\times n\times m$), and the second tensor $R$ ($b\times m\times p$), the output $O$ is of shape ($b\times n\times p$), and has been calculated by performing $b$ matrix multiplications of the submatrices of $T$ and $R$: $O_i = T_i @ R_i$
* `torch.einsum`: Performs matrix multiplications and more (i.e. sums of products) using the Einstein summation convention. Explanation of the Einstein sum can be found in assignment 1.
:::

:::{.callout-note}
Usually, we use `torch.matmul` or `torch.bmm`.
:::

## Operations
:::{.callout-tip icon=false}
## Multiplication
We can try a matrix multiplication with `torch.matmul`:

```{python}
x = torch.arange(6)
x = x.view(2, 3)
print("X", x)
```
```{python}
W = torch.arange(9).view(3, 3) # We can also stack multiple operations in a single line
print("W", W)
```
```{python}
h = torch.matmul(x, W) # Verify the result by calculating it by hand too!
print("h", h)
```
:::

## Operations
:::{.callout-tip icon=false}
## Indexing
We often have the situation where we need to select a part of a tensor. Indexing works just like in numpy, so let's try it:
```{python}
x = torch.arange(12).view(3, 4)
print("X", x)
```
```{python}
print(x[:, 1])   # Second column
```
```{python}
print(x[0])      # First row
```
```{python}
print(x[:2, -1]) # First two rows, last column
```
```{python}
print(x[1:3, :]) # Middle two rows
```
:::

## Computation

:::{.callout-tip icon=false}
## Dynamic computation graph: recap

- PyTorch automatically gives us **gradients/derivatives** of functions that we define. 

- if our neural network would output a single scalar value, we would talk about taking the **derivative**, but you will see that quite often we will have **multiple** output variables ("values"); in that case we talk about **gradients**.

- given an input $\mathbf{x}$, we define our function by **manipulating** that input, usually by matrix-multiplications with weight matrices and additions with so-called bias vectors. As we manipulate our input, we are automatically creating a **computational graph**. This graph shows how to arrive at our output from our input. 

- PyTorch is a **define-by-run** framework; this means that we can just do our manipulations, and PyTorch will keep track of that graph for us. Thus, we create a dynamic computation graph along the way.

- the only thing we have to do is to compute the **output**, and then we can ask PyTorch to automatically get the **gradients**. 
:::

## Computation

:::{.callout-tip icon=false}
## Gradients
The first thing we have to do is to specify which tensors require gradients. By default, when we create a tensor, it does not require gradients.
```{python}
x = torch.ones((3,))
print(x.requires_grad)
```
:::

:::{.callout-warning icon=false}
## Gradients: enabling
We can change this for an existing tensor using the function `requires_grad_()` (underscore indicating that this is a in-place operation). Alternatively, when creating a tensor, you can pass the argument requires_grad=True to most initializers we have seen above.
```{python}
x.requires_grad_(True)
print(x.requires_grad)
```
:::

## Computation

:::{.callout-tip icon=false}
## Computation graph: example
In order to get familiar with the concept of a computation graph, we will create one for the following function:

$$y = \frac{1}{\ell(x)}\sum_i \left[(x_i + 2)^2 + 3\right],$$

where we use $\ell(x)$ to denote the number of elements in $x$. In other words, we are taking a mean here over the operation within the sum. You could imagine that $x$ are our parameters, and we want to optimize (either maximize or minimize) the output $y$. For this, we want to obtain the gradients $\partial y / \partial \mathbf{x}$. For our example, we'll use $\mathbf{x}=[0,1,2]$ as our input.
```{python}
x = torch.arange(3, dtype=torch.float32, requires_grad=True) # Only float tensors can have gradients
print("X", x)
```
:::

## Computation

:::{.callout-tip icon=false}
## Computation graph: example
Now let's build the computation graph step by step.
```{python}
a = x + 2
b = a ** 2
c = b + 3
y = c.mean()
print("Y", y)
```
:::

![](img/pytorch_computation_graph.svg)

## Computation
:::{.callout-tip icon=false}
## Computation graph: example

- Each node of the computation graph has automatically defined a function for calculating the gradients with respect to its inputs, `grad_fn`.
- This is why the computation graph is usually visualized in the reverse direction (arrows point from the result to the inputs).
:::

## Computation
:::{.callout-tip icon=false}
## Computation graph: example
We can perform backpropagation on the computation graph by calling the function `backward()` on the last output, which effectively calculates the gradients for each tensor that has the property `requires_grad=True`:

```{python}
y.backward()
```
`x.grad` will now contain the gradient $\partial y/ \partial \mathcal{x}$, and this gradient indicates how a change in $\mathbf{x}$ will affect output $y$ given the current input $\mathbf{x}=[0,1,2]$:
```{python}
print(x.grad)
```
:::

## Computation
:::{.callout-tip icon=false}
## Computation graph: example
We can also verify these gradients by hand. We will calculate the gradients using the chain rule, in the same way as PyTorch did it:

$$\frac{\partial y}{\partial x_i} = \frac{\partial y}{\partial c_i}\frac{\partial c_i}{\partial b_i}\frac{\partial b_i}{\partial a_i}\frac{\partial a_i}{\partial x_i}$$

Note that we have simplified this equation to index notation, and by using the fact that all operation besides the mean do not combine the elements in the tensor. The partial derivatives are:

$$
\frac{\partial a_i}{\partial x_i} = 1,\hspace{1cm}
\frac{\partial b_i}{\partial a_i} = 2\cdot a_i\hspace{1cm}
\frac{\partial c_i}{\partial b_i} = 1\hspace{1cm}
\frac{\partial y}{\partial c_i} = \frac{1}{3}
$$

Hence, with the input being $\mathbf{x}=[0,1,2]$, our gradients are $\partial y/\partial \mathbf{x}=[4/3,2,8/3]$. The previous code cell should have printed the same result.
:::

## GPU support
:::{.callout-tip icon=false}
## GPU overview
A crucial feature of PyTorch is the support of GPUs, short for **Graphics Processing Unit**.

- A GPU can perform many thousands of small operations in parallel, making it very well suitable for performing large matrix operations in neural networks.
- GPUs can accelerate the training of your network up to a factor of $100$ which is essential for large neural networks. 
- PyTorch implements a lot of functionality for supporting GPUs (mostly those of NVIDIA due to the libraries [CUDA](https://developer.nvidia.com/cuda-zone) and [cuDNN](https://developer.nvidia.com/cudnn)). 
:::

## GPU support
![](img/comparison_CPU_GPU.png)


## GPU support
:::{.callout-tip icon=false}
## GPU
First, let's check whether you have a GPU available:
```{python}
gpu_avail = torch.cuda.is_available()
print(f"Is the Nvidia GPU available? {gpu_avail}")

gpu_avail = torch.mps.is_available()
print(f"Is the Apple GPU available? {gpu_avail}")
```
:::

## GPU support
:::{.callout-note icon=false}
## Pushing to GPU
By default, all tensors you create are stored on the CPU. We can push a tensor to the GPU by using the function `.to(...)`, or `.cuda()`. 
:::

:::{.callout-tip}
It is often a good practice to define a `device` object in your code which points to the GPU if you have one, and otherwise to the CPU. Then, you can write your code with respect to this device object, and it allows you to run the same code on both a CPU-only system, and one with a GPU.

We can specify the device as follows: 
```{python}
device = torch.device("mps") if torch.mps.is_available() else torch.device("cpu")
print("Device", device)
```
:::

## GPU support
:::{.callout-tip icon=false}
## Pushing to GPU
Let's create a tensor and push it now:
```{python}
x = torch.zeros(2, 3)
x = x.to(device)
print("X", x)
```
:::

:::{.callout-note}
The zero next to `mps` indicates that this is the zero-th GPU device on your computer. PyTorch also supports multi-GPU systems, but this you will only need once you have very big networks to train.
:::

## GPU support
:::{.callout-tip icon=false}
## GPU-to-CPU comparison
We can compare the runtime of a large matrix multiplication on the CPU with a operation on the GPU:
```{python}
x = torch.randn(1000, 1000)

## CPU version
start_time = time.time()
_ = torch.matmul(x, x)
end_time = time.time()
print(f"CPU time: {(end_time - start_time):6.5f}s")

## GPU version
x = x.to(device)
_ = torch.matmul(x, x)  # First operation to 'burn in' GPU
# CUDA is asynchronous, so we need to use different timing functions
start = torch.mps.Event(enable_timing=True)
end = torch.mps.Event(enable_timing=True)
start.record()
_ = torch.matmul(x, x)
end.record()
torch.mps.synchronize()  # Waits for everything to finish running on the GPU
print(f"GPU time: {0.001 * start.elapsed_time(end):6.5f}s")  # Milliseconds to seconds
```
:::

## GPU support
:::{.callout-tip icon=false}
## GPU: seed sync
When generating random numbers, the seed between CPU and GPU is **not synchronized**.

Hence, we need to set the seed on the GPU separately to ensure a **reproducible** code. Hence, we also set the seed on the GPU:
```{python}
# GPU operations have a separate seed we also want to set
if torch.mps.is_available():
    torch.mps.manual_seed(42)
    #torch.mps.manual_seed_all(42)

# Additionally, some operations on a GPU are implemented stochastic for efficiency
# We want to ensure that all operations are deterministic on GPU (if used) for reproducibility
torch.backends.mps.deterministic = True
torch.backends.mps.benchmark = False
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Manual way
If we want to build a neural network in PyTorch, we could specify all our parameters (weight matrices, bias vectors) using `Tensors` (with `requires_grad=True`), ask PyTorch to calculate the gradients and then adjust the parameters.

But things can quickly get **cumbersome** if we have a lot of parameters.
:::
:::{.callout-note icon=false}
## Using torch.nn
In PyTorch, there is a package called `torch.nn` that makes building neural networks more convenient. 
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Example description
Given two binary inputs $x_1$ and $x_2$, the label to predict is $1$ if either $x_1$ or $x_2$ is $1$ while the other is $0$, or the label is $0$ in all other cases.

The example became famous by the fact that a **single neuron**, i.e. a linear classifier, **cannot learn** this simple function.

<!-- To make it a little bit more interesting, we move the XOR into continuous space and introduce some gaussian noise on the binary inputs. Our desired separation of an XOR dataset could look as follows: -->
:::

![](img/continuous_xor.svg)


## Continuous XOR example
:::{.callout-tip icon=false}
## Model
The package `torch.nn` defines a series of useful classes like linear networks layers, activation functions, loss functions etc. A full list can be found [here](https://pytorch.org/docs/stable/nn.html). In case you need a certain network layer, check the documentation of the package first before writing the layer yourself as the package likely contains the code for it already. We import it below:

```{python}
import torch.nn as nn
```
:::
:::{.callout-note icon=false}
## Functional
Additionally to `torch.nn`, there is also `torch.nn.functional`. It contains functions that are used in network layers. This is in contrast to `torch.nn` which defines them as `nn.Modules`, and `torch.nn` actually uses a lot of functionalities from `torch.nn.functional`.
```{python}
import torch.nn.functional as F
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## nn.Module
In PyTorch, a neural network is built up out of modules. Modules can contain other modules, and a neural network is considered to be a module itself as well. The basic template of a module is as follows:
```{python}
class MyModule(nn.Module):

    def __init__(self):
        super().__init__()
        # Some init for my module

    def forward(self, x):
        # Function for performing the calculation of the module.
        pass
```
:::

:::{.callout-note}
The forward function is where the computation of the module is taken place, and is executed when you call the module (`nn = MyModule(); nn(x)`). In the init function, we usually create the parameters of the module, using `nn.Parameter`, or defining other modules that are used in the forward function. The backward calculation is done automatically, but could be overwritten as well if wanted.
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Simple classifier
We can now make use of the pre-defined modules in the `torch.nn` package, and define our own small neural network. We will use a minimal network with a input layer, one hidden layer with tanh as activation function, and a output layer.

:::

![](img/small_neural_network.svg)

## Continuous XOR example
:::{.callout-tip icon=false}
## Simple classifier: Module def
```{python}
class SimpleClassifier(nn.Module):

    def __init__(self, num_inputs, num_hidden, num_outputs):
        super().__init__()
        # Initialize the modules we need to build the network
        self.linear1 = nn.Linear(num_inputs, num_hidden)
        self.act_fn = nn.Tanh()
        self.linear2 = nn.Linear(num_hidden, num_outputs)

    def forward(self, x):
        # Perform the calculation of the model to determine the prediction
        x = self.linear1(x)
        x = self.act_fn(x)
        x = self.linear2(x)
        return x
```
:::

:::{.callout-note}
Note that we do not apply a sigmoid on the output yet. This is because other functions, especially the loss, are more efficient and precise to calculate on the original outputs instead of the sigmoid output.
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Simple classifier: Module creation

```{python}
model = SimpleClassifier(num_inputs=2, num_hidden=4, num_outputs=1)
# Printing a module shows all its submodules
print(model)
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Simple classifier: Module parameters
The parameters of a module can be obtained by using its `parameters()` functions, or `named_parameters()` to get a name to each parameter object. For our small neural network, we have the following parameters:
```{python}
for name, param in model.named_parameters():
    print(f"Parameter {name}, shape {param.shape}")
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Simple classifier: Module parameters

- Each linear layer has a weight matrix of the shape `[output, input]`, and a bias of the shape `[output]`.
- The tanh activation function does not have any parameters.
:::

:::{.callout-note}
Parameters are only registered for `nn.Module` objects that are direct object attributes, i.e. `self.a = ...`. There are alternatives, like `nn.ModuleList`, `nn.ModuleDict` and `nn.Sequential`, that allow you to have different data structures of modules. 
:::
## Continuous XOR example
:::{.callout-tip icon=false}
## Simple classifier: data

PyTorch also provides a few functionalities to load the training and test data efficiently, summarized in the package `torch.utils.data`.
```{python}
import torch.utils.data as data
```
:::
:::{.callout-note}
The data package defines two classes which are the standard interface for handling data in PyTorch:

- `data.Dataset`: provides an uniform interface to access the training/test data
- `data.DataLoader`: makes sure to efficiently load and stack the data points from the dataset into batches during training.

:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Dataset class
To define a dataset in PyTorch, we simply specify two functions:

- `__getitem__`: has to return the $i$-th data point in the dataset
- `__len__`: returns the size of the dataset.
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Dataset class
```{python}
class XORDataset(data.Dataset):

    def __init__(self, size, std=0.1):
        """
        Inputs:
            size - Number of data points we want to generate
            std - Standard deviation of the noise (see generate_continuous_xor function)
        """
        super().__init__()
        self.size = size
        self.std = std
        self.generate_continuous_xor()

    def generate_continuous_xor(self):
        # Each data point in the XOR dataset has two variables, x and y, that can be either 0 or 1
        # The label is their XOR combination, i.e. 1 if only x or only y is 1 while the other is 0.
        # If x=y, the label is 0.
        data = torch.randint(low=0, high=2, size=(self.size, 2), dtype=torch.float32)
        label = (data.sum(dim=1) == 1).to(torch.long)
        # To make it slightly more challenging, we add a bit of gaussian noise to the data points.
        data += self.std * torch.randn(data.shape)

        self.data = data
        self.label = label

    def __len__(self):
        # Number of data point we have. Alternatively self.data.shape[0], or self.label.shape[0]
        return self.size

    def __getitem__(self, idx):
        # Return the idx-th data point of the dataset
        # If we have multiple things to return (data point and label), we can return them as tuple
        data_point = self.data[idx]
        data_label = self.label[idx]
        return data_point, data_label
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Dataset class
Let's create and inspect:
```{python}
dataset = XORDataset(size=200)
print("Size of dataset:", len(dataset))
print("Data point 0:", dataset[0])
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Dataset visualization
::: {.panel-tabset}
### Func definition
```{python}
def visualize_samples(data, label):
    if isinstance(data, torch.Tensor):
        data = data.cpu().numpy()
    if isinstance(label, torch.Tensor):
        label = label.cpu().numpy()
    data_0 = data[label == 0]
    data_1 = data[label == 1]

    plt.figure(figsize=(4,4))
    plt.scatter(data_0[:,0], data_0[:,1], edgecolor="#333", label="Class 0")
    plt.scatter(data_1[:,0], data_1[:,1], edgecolor="#333", label="Class 1")
    plt.title("Dataset samples")
    plt.ylabel(r"$x_2$")
    plt.xlabel(r"$x_1$")
    plt.legend()
```

### Result

```{python}
visualize_samples(dataset.data, dataset.label)
plt.show()
```
:::
:::

## Continuous XOR example {.scrollable}
:::{.callout-tip icon=false}
## The data loader class

The class `torch.utils.data.DataLoader` represents a Python iterable over a dataset with support for automatic batching, multi-process data loading and many more features. The data loader communicates with the dataset using the function `__getitem__`, and stacks its outputs as tensors over the first dimension to form a batch.
We can configure our data loader with the following input arguments:

* `batch_size`: Number of samples to stack per batch
* `shuffle`: If True, the data is returned in a random order. This is important during training for introducing stochasticity. 
* `num_workers`: Number of subprocesses to use for data loading. The default, 0, means that the data will be loaded in the main process which can slow down training for datasets where loading a data point takes a considerable amount of time (e.g. large images). More workers are recommended for those, but can cause issues on Windows computers. For tiny datasets as ours, 0 workers are usually faster.
* `pin_memory`: If True, the data loader will copy Tensors into CUDA pinned memory before returning them. This can save some time for large data points on GPUs. Usually a good practice to use for a training set, but not necessarily for validation and test to save memory on the GPU.
* `drop_last`: If True, the last batch is dropped in case it is smaller than the specified batch size. This occurs when the dataset size is not a multiple of the batch size. Only potentially helpful during training to keep a consistent batch size.
:::

## Continuous XOR example {.scrollable}
:::{.callout-tip icon=false}
## The data loader class
Create:
```{python}
data_loader = data.DataLoader(dataset, batch_size=8, shuffle=True)
```
Fetch some data:
```{python}
# next(iter(...)) catches the first batch of the data loader
# If shuffle is True, this will return a different batch every time we run this cell
# For iterating over the whole dataset, we can simple use "for batch in data_loader: ..."
data_inputs, data_labels = next(iter(data_loader))

# The shape of the outputs are [batch_size, d_1,...,d_N] where d_1,...,d_N are the
# dimensions of the data point returned from the dataset class
print("Data inputs", data_inputs.shape, "\n", data_inputs)
print("Data labels", data_labels.shape, "\n", data_labels)
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Optimization

After defining the model and the dataset, it is time to prepare the optimization of the model. During training, we will perform the following steps:

1. Get a batch from the data loader
2. Obtain the predictions from the model for the batch
3. Calculate the loss based on the difference between predictions and labels
4. Backpropagation: calculate the gradients for every parameter with respect to the loss
5. Update the parameters of the model in the direction of the gradients

We have seen how we can do step 1, 2 and 4 in PyTorch. Now, we will look at step 3 and 5.
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Loss
We can calculate the loss for a batch by simply performing a few tensor operations as those are automatically added to the computation graph. For instance, for binary classification, we can use Binary Cross Entropy (BCE) which is defined as follows:

$$\mathcal{L}_{BCE} = -\sum_i \left[ y_i \log x_i + (1 - y_i) \log (1 - x_i) \right]$$

where $y$ are our labels, and $x$ our predictions, both in the range of $[0,1]$.
:::

## Continuous XOR example
:::{.callout-note icon=false}
## Predefined funcs
PyTorch already provides a list of predefined loss functions which we can use (see [here](https://pytorch.org/docs/stable/nn.html#loss-functions) for a full list).

For BCE, PyTorch has two modules:

- `nn.BCELoss()`: expects the inputs $x$ to be in the range $[0,1]$, i.e. the output of a sigmoid,
- `nn.BCEWithLogitsLoss()` combines a sigmoid layer and the BCE loss in a single class. This version is numerically more stable than using a plain Sigmoid followed by a BCE loss because of the logarithms applied in the loss function.
:::

::: aside
It is adviced to use loss functions applied on "logits" where possible (remember to not apply a sigmoid on the output of the model in this case!).
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Loss
For our model defined above, we therefore use the module `nn.BCEWithLogitsLoss`.

```{python}
loss_module = nn.BCEWithLogitsLoss()
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Stochastic Gradient Descent

For updating the parameters, PyTorch provides the package `torch.optim` that has most popular optimizers implemented.

`torch.optim.SGD` (**Stochastic Gradient Descent**). Updates parameters by multiplying the gradients with a small constant, called learning rate, and subtracting those from the parameters (hence minimizing the loss).

A good default value of the learning rate for a small network as ours is 0.1.
```{python}
# Input to the optimizer are the parameters of the model: model.parameters()
optimizer = torch.optim.SGD(model.parameters(), lr=0.1)
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Optimizer
The optimizer provides two useful functions:

- `optimizer.step()`: updates the parameters based on the gradients as explained above. 
- `optimizer.zero_grad()`: sets the gradients of all parameters to zero.
:::

:::{.callout-important}
`zero_grad()` is a crucial pre-step before performing backpropagation. If we call the `backward` function on the loss while the parameter gradients are non-zero from the previous batch, the new gradients would actually be added to the previous ones instead of overwriting them. This is done because a parameter might occur multiple times in a computation graph, and we need to sum the gradients in this case instead of replacing them.
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Training

Finally, we are ready to train our model. As a first step, we create a slightly larger dataset and specify a data loader with a larger batch size.
```{python}
train_dataset = XORDataset(size=2500)
train_data_loader = data.DataLoader(train_dataset, batch_size=128, shuffle=True)
```
Then, push to GPU:

```{python}
# Push model to device. Has to be only done once
model.to(device)
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Training
Set model to training mode via `model.train()` (there is also `model.eval()`):
```{python}
def train_model(model, optimizer, data_loader, loss_module, num_epochs=100):
    # Set model to train mode
    model.train()

    # Training loop
    for epoch in tqdm(range(num_epochs)):
        for data_inputs, data_labels in data_loader:

            ## Step 1: Move input data to device (only strictly necessary if we use GPU)
            data_inputs = data_inputs.to(device)
            data_labels = data_labels.to(device)

            ## Step 2: Run the model on the input data
            preds = model(data_inputs)
            preds = preds.squeeze(dim=1) # Output is [Batch size, 1], but we want [Batch size]

            ## Step 3: Calculate the loss
            loss = loss_module(preds, data_labels.float())

            ## Step 4: Perform backpropagation
            # Before calculating the gradients, we need to ensure that they are all zero.
            # The gradients would not be overwritten, but actually added to the existing ones.
            optimizer.zero_grad()
            # Perform backpropagation
            loss.backward()

            ## Step 5: Update the parameters
            optimizer.step()
```
:::
## Continuous XOR example
:::{.callout-tip icon=false}
## Training
Train:
```{python}
train_model(model, optimizer, train_data_loader, loss_module)
```
:::
## Continuous XOR example
:::{.callout-tip icon=false}
## Training: save a model

After finish training a model, we save the model to disk so that we can load the same weights at a later time. For this, we extract the so-called `state_dict` from the model which contains all learnable parameters.
```{python}
state_dict = model.state_dict()
print(state_dict)
```
To save the state dictionary, we can use `torch.save`:
```{python}
# torch.save(object, filename). For the filename, any extension can be used
torch.save(state_dict, "our_model.tar")
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Training: load a model
To load a model from a state dict, we use the function torch.load to load the state dict from the disk, and the module function load_state_dict to overwrite our parameters with the new values:
```{python}
# Load state dict from the disk (make sure it is the same name as above)
state_dict = torch.load("our_model.tar")

# Create a new model and load the state
new_model = SimpleClassifier(num_inputs=2, num_hidden=4, num_outputs=1)
new_model.load_state_dict(state_dict)

# Verify that the parameters are the same
print("Original model\n", model.state_dict())
print("\nLoaded model\n", new_model.state_dict())
```
:::
## Continuous XOR example
:::{.callout-tip icon=false}
## Evaluation

Once we have trained a model, it is time to evaluate it on a held-out test set. As our dataset consist of randomly generated data points, we need to first create a test set with a corresponding data loader.
```{python}
test_dataset = XORDataset(size=500)
# drop_last -> Don't drop the last batch although it is smaller than 128
test_data_loader = data.DataLoader(test_dataset, batch_size=128, shuffle=False, drop_last=False)
```
As metric, we will use accuracy which is calculated as follows:

$$acc = \frac{\#\text{correct predictions}}{\#\text{all predictions}} = \frac{TP+TN}{TP+TN+FP+FN}$$

where TP are the true positives, TN true negatives, FP false positives, and FN the fale negatives.
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Evaluation

- we don't need to keep track of the computation graph as we don't intend to calculate the gradients. In PyTorch this is done via `with torch.no_grad(): ...`.
- remember to additionally set the model to eval mode.

```{python}
def eval_model(model, data_loader):
    model.eval() # Set model to eval mode
    true_preds, num_preds = 0., 0.

    with torch.no_grad(): # Deactivate gradients for the following code
        for data_inputs, data_labels in data_loader:

            # Determine prediction of model on dev set
            data_inputs, data_labels = data_inputs.to(device), data_labels.to(device)
            preds = model(data_inputs)
            preds = preds.squeeze(dim=1)
            preds = torch.sigmoid(preds) # Sigmoid to map predictions between 0 and 1
            pred_labels = (preds >= 0.5).long() # Binarize predictions to 0 and 1

            # Keep records of predictions for the accuracy metric (true_preds=TP+TN, num_preds=TP+TN+FP+FN)
            true_preds += (pred_labels == data_labels).sum()
            num_preds += data_labels.shape[0]

    acc = true_preds / num_preds
    print(f"Accuracy of the model: {100.0*acc:4.2f}%")
```
:::

## Continuous XOR example
:::{.callout-tip icon=false}
## Evaluation

```{python}
eval_model(model, test_data_loader)
```
:::

![](img/whoa.png)

## Continuous XOR example {.scrollable}
:::{.callout-tip icon=false}
## Visualizing classification boundaries
To visualize what our model has learned, we can perform a prediction for every data point in a range of $[-0.5, 1.5]$, and visualize the predicted class (class 0 is blue and class 1 is orange).
```{python}
@torch.no_grad() # Decorator, same effect as "with torch.no_grad(): ..." over the whole function.
def visualize_classification(model, data, label):
    if isinstance(data, torch.Tensor):
        data = data.cpu().numpy()
    if isinstance(label, torch.Tensor):
        label = label.cpu().numpy()
    data_0 = data[label == 0]
    data_1 = data[label == 1]

    fig = plt.figure(figsize=(4,4), dpi=500)
    plt.scatter(data_0[:,0], data_0[:,1], edgecolor="#333", label="Class 0")
    plt.scatter(data_1[:,0], data_1[:,1], edgecolor="#333", label="Class 1")
    plt.title("Dataset samples")
    plt.ylabel(r"$x_2$")
    plt.xlabel(r"$x_1$")
    plt.legend()

    # Let's make use of a lot of operations we have learned above
    model.to(device)
    c0 = torch.Tensor(to_rgba("C0")).to(device)
    c1 = torch.Tensor(to_rgba("C1")).to(device)
    x1 = torch.arange(-0.5, 1.5, step=0.01, device=device)
    x2 = torch.arange(-0.5, 1.5, step=0.01, device=device)
    xx1, xx2 = torch.meshgrid(x1, x2, indexing='ij')  # Meshgrid function as in numpy
    model_inputs = torch.stack([xx1, xx2], dim=-1)
    preds = model(model_inputs)
    preds = torch.sigmoid(preds)
    output_image = (1 - preds) * c0[None,None] + preds * c1[None,None]  # Specifying "None" in a dimension creates a new one
    output_image = output_image.cpu().numpy()  # Convert to numpy array. This only works for tensors on CPU, hence first push to CPU
    plt.imshow(output_image, origin='lower', extent=(-0.5, 1.5, -0.5, 1.5))
    plt.grid(False)
    return fig

_ = visualize_classification(model, dataset.data, dataset.label)
plt.show()
```
:::

## Additional features
:::{.callout-tip icon=false}
## Tensorboard
TensorBoard is a logging and visualization tool that is a popular choice for training deep learning models.
```{python}
# Import tensorboard logger from PyTorch
from torch.utils.tensorboard import SummaryWriter

# Load tensorboard extension for Jupyter Notebook, only need to start TB in the notebook
%load_ext tensorboard
```
:::

## Additional features
:::{.callout-tip icon=false}
## Tensorboard API

- We start the logging process by creating a new object, `writer = SummaryWriter(...)`, where we specify the directory in which the logging file should be saved
- With this object, we can log different aspects of our model by calling functions of the style `writer.add_...`.
- For example, we can visualize the computation graph with the function `writer.add_graph`, or add a scalar value like the loss with `writer.add_scalar`.
:::

## Additional features
:::{.callout-tip icon=false}
## Tensorboard

```{python}
def train_model_with_logger(model, optimizer, data_loader, loss_module, val_dataset, num_epochs=100, logging_dir='runs/our_experiment'):
    # Create TensorBoard logger
    writer = SummaryWriter(logging_dir)
    model_plotted = False

    # Set model to train mode
    model.train()

    # Training loop
    for epoch in tqdm(range(num_epochs)):
        epoch_loss = 0.0
        for data_inputs, data_labels in data_loader:

            ## Step 1: Move input data to device (only strictly necessary if we use GPU)
            data_inputs = data_inputs.to(device)
            data_labels = data_labels.to(device)

            # For the very first batch, we visualize the computation graph in TensorBoard
            if not model_plotted:
                writer.add_graph(model, data_inputs)
                model_plotted = True

            ## Step 2: Run the model on the input data
            preds = model(data_inputs)
            preds = preds.squeeze(dim=1) # Output is [Batch size, 1], but we want [Batch size]

            ## Step 3: Calculate the loss
            loss = loss_module(preds, data_labels.float())

            ## Step 4: Perform backpropagation
            # Before calculating the gradients, we need to ensure that they are all zero.
            # The gradients would not be overwritten, but actually added to the existing ones.
            optimizer.zero_grad()
            # Perform backpropagation
            loss.backward()

            ## Step 5: Update the parameters
            optimizer.step()

            ## Step 6: Take the running average of the loss
            epoch_loss += loss.item()

        # Add average loss to TensorBoard
        epoch_loss /= len(data_loader)
        writer.add_scalar('training_loss',
                          epoch_loss,
                          global_step = epoch + 1)

        # Visualize prediction and add figure to TensorBoard
        # Since matplotlib figures can be slow in rendering, we only do it every 10th epoch
        if (epoch + 1) % 10 == 0:
            fig = visualize_classification(model, val_dataset.data, val_dataset.label)
            writer.add_figure('predictions',
                              fig,
                              global_step = epoch + 1)

    writer.close()
```
:::

## Additional features
:::{.callout-tip icon=false}
## Tensorboard
Train:
```{python}
model = SimpleClassifier(num_inputs=2, num_hidden=4, num_outputs=1).to(device)
optimizer = torch.optim.SGD(model.parameters(), lr=0.1)
train_model_with_logger(model, optimizer, train_data_loader, loss_module, val_dataset=dataset)
```
:::

## Additional features
:::{.callout-tip icon=false}
## Tensorboard
The TensorBoard file in the folder `runs/our_experiment` now contains a loss curve, the computation graph of our network, and a visualization of the learned predictions over number of epochs. 
```{python}
#| eval: false
%tensorboard --logdir runs/our_experiment
```
:::
![](img/tensorboard_screenshot.png)
